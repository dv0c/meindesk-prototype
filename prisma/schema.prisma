// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  username       String?
  image          String?
  email          String         @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           Role           @default(USER)
  sessions       Session[]
  accounts       Account[]
  Site           Site[]
  Category       Category[]
  Subscription   Subscription[]
  Article        Article[]

  @@index([email, id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String
  slug        String

  thumbnail String? // Single thumbnail URL instead of imageUrls array
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  site     Site?  @relation(fields: [siteId], references: [id], onDelete: Cascade)
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @db.ObjectId

  siteId String? @db.ObjectId

  metadata Json?
  Article  Article[]
}

model Site {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  views      Int @default(0)
  limitViews Int @default(5000)

  title       String
  description String?

  url String @unique

  logo String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  features Features? @relation(fields: [featuresId], references: [id])

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String           @db.ObjectId
  Category       Category[]
  AnalyticsEvent AnalyticsEvent[]
  subscription   Subscription?    @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?          @db.ObjectId
  featuresId     String?          @db.ObjectId
  articleId      String?          @db.ObjectId
  Article        Article[]
}

model Features {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  analytics Boolean @default(true)
  articles  Boolean @default(false)

  viewslimit Int @default(500)
  ratelimit  Int @default(10000)

  Site Site[]
}

model Subscription {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  price             Float
  billing_cycle     String
  status            String   @default("active")
  plan              String   @default("Basic")
  next_billing_date DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Site Site[]
}

model AnalyticsEvent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  siteId    String   @db.ObjectId
  path      String
  referrer  String?
  userAgent String?
  region    String?
  ipAddress String?
  createdAt DateTime @default(now())

  Site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId, createdAt])
}

model Article {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  siteId String @db.ObjectId

  title String
  slug  String @unique @default(uuid())

  excerpt String?
  content Json?
  html    String?

  cover String?

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  status ArticleStatus @default(DRAFT)

  site       Site      @relation(fields: [siteId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @db.ObjectId

  metadata Json?

  @@index([slug, id])
}

enum ArticleStatus {
  PUBLISHED
  DRAFT
  BANNED
  DELETED
}
